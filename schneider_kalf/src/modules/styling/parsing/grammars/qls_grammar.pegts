/*
 * Grammar for Questionnaire Language Styling
 *
 */

{
    let widgetMapping = {
        "spinbox" : Nodes.SpinBoxWidgetAttribute,
        "text" : Nodes.TextWidgetAttribute,
        "slider" : Nodes.SliderWidgetAttribute,
        "dropdown" : Nodes.DropdownWidgetAttribute,
        "checkbox" : Nodes.CheckboxWidgetAttribute,
        "radio" : Nodes.RadioWidgetAttribute
    }

    let baseAttributeMapping = {
        "color" : Nodes.ColorAttribute,
        "width" : Nodes.WidthAttribute,
        "fontsize" : Nodes.FontSizeAttribute,
        "font" : Nodes.FontAttribute
    }
}

Root
  = __ stylesheet:Stylesheet __ {
    return stylesheet
}

Types
  = "boolean"
  / "money"
  / "date"
  / "integer"
  / "decimal"
  / "text"

StylesheetToken = "stylesheet"
PageToken = "page"
SectionToken = "section"
QuestionToken = "question"
DefaultToken =  "default"
WidgetToken = "widget"
BooleanToken = "true" / "false"

PageBodyStatements = Section / Default
SectionBodyStatements = Question / Section / Default

Stylesheet
 = StylesheetToken _ identifier:Identifier __ "{" __ page:Page* __ "}" __ {
    return new Nodes.Stylesheet( identifier, page );
}

Page
 = PageToken _ identifier:Identifier __ block:PageBlock __ {
    return new Nodes.Page( identifier, block );
}

PageBlock
 = "{" __ body:PageBodyStatements+ __ "}" __ {
    return body;
}

Section
 = SectionToken _ name:StringLiteral __ block:SectionBlock __ {
    return new Nodes.Section( name, block );
}

SectionBlock
 = "{" __ body:SectionBodyStatements+ __ "}" {
    return body
}

Question
 = QuestionToken _ identifier:Identifier __ body:StyleBlock? __ {
    body = body ? body : [];
    return new Nodes.QuestionStyle( identifier, body );
}

Default
 = DefaultToken _ type:Types __ body:StyleBlock __ {
    return new Nodes.DefaultStyle( type, body );
 }

StyleBlock
 = StyleBlockNoBrackets
 / StyleBlockBrackets

StyleBlockBrackets
 = "{" __ args:StyleAttribute+ __ "}" {
    return args;
}

StyleBlockNoBrackets
 = body:StyleAttribute+ {
    return body;
}

StyleAttribute
 = WidgetAttribute
 / BaseAttribute

WidgetAttribute
 = WidgetToken _ id:Identifier options:WidgetOptions? __ {
    const WidgetAttributeConstructor = widgetMapping[id];
    return new WidgetAttributeConstructor( options );
}

WidgetOptions
 = "(" _ options:Options _ ")" __ {
    return options;
}

Options
  = head:StringLiteral next:( _ "," _ rest:Options { return rest; } )? {
    return next != null ? [head].concat(next) : [head];
}

BaseAttribute
 = _ identifier:Identifier _ ":" _ args:BaseAttributeValues __{
    const BaseAttributeConstructor = baseAttributeMapping[identifier];
    return new BaseAttributeConstructor( args );
}

BaseAttributeValues
 = NumberLiteral
 / StringLiteral
 / ColorLiteral
 / BooleanLiteral

ColorLiteral
  = ["#"][0-9]+ {
    return text();
}

Identifier
 = [a-zA-Z]+ {
    return text();
}

BooleanLiteral
  = BooleanToken {
    return text() == "true"
}

NumberLiteral
  = [-]?[0-9]+ {
    return parseInt(text(), 10)
}

// String Literal, Currently only support double quoted Strings
StringLiteral
 = '"' chars:DoubleString* '"'{
    return chars.join('');
}

DoubleString
  = !('"' / "\\") char:. { return char; }
  / "\\" sequence:EscapeSequence { return sequence; }

EscapeSequence
  = "'"
  / '"'
  / "\\"
  / "b"  { return "\b";   }
  / "f"  { return "\f";   }
  / "n"  { return "\n";   }
  / "r"  { return "\r";   }
  / "t"  { return "\t";   }
  / "v"  { return "\x0B"; }

SourceCharacter = .

WhiteSpace
  = "\t"
  / "\v"
  / "\f"
  / " "
  / "\u00A0"
  / "\uFEFF"

_ = (WhiteSpace / MultiLineCommentNoLineTerminator)*
__ = (WhiteSpace / LineTerminatorSequence / Comment)*

LineTerminatorSequence
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028"
  / "\u2029"

LineTerminator
    = [\n\r\u2028\u2029]

Comment
  = MultiLineComment
  / SingleLineComment

SingleLineComment
  = "//" (!LineTerminator SourceCharacter)*

MultiLineComment
  = "/*" (!"*/" SourceCharacter)* "*/"

MultiLineCommentNoLineTerminator
  = "/*" (!("*/" / LineTerminator) SourceCharacter)* "*/"