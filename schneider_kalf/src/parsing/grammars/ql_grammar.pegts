/*
 * Grammar for the Questionnaire Language
 *
 */

{
  // TODO: Reserve words "true" "false"
  // A base type for building the main tree layout
  let operations = {
              // "!"  : Node.Negation,
              "&&" : Nodes.And,
              "||" : Nodes.Or,
              "<=" : Nodes.SmallerThanOrEqual,
              ">=" : Nodes.LargerThanOrEqual,
              "!=" : Nodes.NotEqual,
              "==" : Nodes.Equals,
              "<"  : Nodes.SmallerThan,
              ">"  : Nodes.LargerThan,
              "+"  : Nodes.Addition,
              "-"  : Nodes.Subtraction,
              "*"  : Nodes.Multiplication,
              "/"  : Nodes.Division
            }
    let types = {
                  "boolean" : FieldType.Boolean,
                  "date" : FieldType.Date,
                  "money" : FieldType.Money,
                  "integer" : FieldType.Integer,
                  "float" : FieldType.Float,
                  "text" : FieldType.Text,
                }

  function base(type, rest){
    return (<any>Object).assign({
        type:type,
        //location:location(),
    },
    rest)
  }

  // Building an expression, DRY
  function buildExpression(head, tail) {
    return tail.reduce(function(left, curr) {
      const Operation = operations[curr[1]];
      return new Operation(left, curr[3]);
    }
    , head);
  }
}

start = call+

call = form:form _ lb* { return form}

// Unary operation
unaryOps = "!"

// Boolean operations
boolOps = "&&" / "||"

// Compartive operations
compOps = "<=" / ">=" / "!=" / "==" / "<" / ">"

//Addative operations
addOps = "+" / "-"

//Multiplicant operations
multOps = "*" / "/"

// All includede aritmic operations
aritmicOps = multOps / addOps

literalTypes = "boolean" / "money" / "date" / "integer" / "float" / "text"

type
 = literalType:literalTypes {
    return types[literalType];
}

// Field for github syntax
field
 = _ label:stringLiteral lb* name:name _ ":" _ type:type lb* expr:("=" lb* expression)? lb*{
    if (expr)
        return new Nodes.ComputedField(name, label.value, type, expr[2]);
    return new Nodes.Question(name, label.value, type);
}

block
 = "{" lb* e:(field / if)+ lb* "}" {
     return e;
}

form
 = _ "form" _ name:name _ block:block lb*{
     return new Nodes.FormNode(name, block)
}

if
 = _ "if" _ predicate:expression _ block:block lb* {
     return new Nodes.IfCondition(predicate, block);
}

// Initiates an expression
expression
 = expr:boolExpr {
    return expr;
}

// BooleanExpression
boolExpr
  = _ head:compExpr _ tail:(_(boolOps)_ compExpr)+ _{
    return buildExpression(head, tail)
  }
  / compExpr

// ComparisonExpression
compExpr
  = _ head:additiveExpr _ tail:(_(compOps)_ additiveExpr)+ _{
    return buildExpression(head, tail)
  }
  / additiveExpr

// AdditiveExpression
additiveExpr
  = _ head:multiplicativeExpr _ tail:(_(addOps)_ multiplicativeExpr)+ _{
    return buildExpression(head, tail)
  }
  / multiplicativeExpr

// MultiplicativeExpression
multiplicativeExpr
  = _ head:primary _ tail:(_(multOps)_ primary)+ _{
    return buildExpression(head, tail)
  }
  / primary

primary
  = value
  / "("_ expr:boolExpr _ ")" { return expr; }
  / unarryExpr

// UnaryExpression
unarryExpr
 = _ op:unaryOps value:primary _ {
    return {
        type:"UnaryExpression",
        attributes:{
            operator:op,
        },
        children: [value],
     }
}

name
 = v:([a-zA-Z]+) {
    return v.join("")
}

// Identifier?
identifier
 = chars:([a-zA-Z]+) {
    return new Nodes.VariableIdentifier(chars.join(""));
}

// Boolean Literal
booleanLiteral
 = Literal:("True" / "False") {
    return new Nodes.BooleanLiteral(Literal == "True")
}

// Integer
numberLiteral
 = digits:([-]?[0-9]+) {
    return new Nodes.NumberLiteral(parseInt(digits.join(""), 10))
}

// String Literal, Currently only support double quoted String
stringLiteral
 = '"' chars:doubleString* '"'{
    return new Nodes.StringLiteral(chars.join(''));
}

doubleString
  = !('"' / "\\") char:. { return char; }
  / "\\" sequence:escapeSequence { return sequence; }

escapeSequence
  = "'"
  / '"'
  / "\\"
  / "b"  { return "\b";   }
  / "f"  { return "\f";   }
  / "n"  { return "\n";   }
  / "r"  { return "\r";   }
  / "t"  { return "\t";   }
  / "v"  { return "\x0B"; }

// Supported types
type = "money" / "date" / "integer" / "boolean"

value = identifier / numberLiteral / stringLiteral / booleanLiteral

// Single line comments
comment = "//" (![\n] .)*

// White spaces and new lines
ws = [ \t]
_ = (ws / comment)*
lb = [ \t\r\n] / comment