/*
 * Grammar for Questionnaire Language Styling
 *
 */

{

}

start = call+

call = lb* form:stylesheet lb* { return form}

block
 = "{" lb* body:(section / default)+ lb* "}" {
     return body;
}

sectionBlockQuoted
 = _ "{" lb* body:sectionBlockUnquoted+ lb* "}" lb* {
     return body
}

sectionBlockUnquoted
 = _ body:(question / section / default) lb* {
     return body
}

sectionBody
 = sectionBlockQuoted / sectionBlockUnquoted


default = defaultBlockQuoted / defaultBlockUnquoted

defaultBlockQuoted
 = _ "default" _ type:type _ "{" lb* args:defaultBlockBody+ lb* "}" lb* {
   return {type, args};
}

defaultBlockUnquoted
 = _ "default" _ type:type lb* args:defaultBlockBody lb* {
   return {type, args};
}

defaultBlockBody
 = (widget / style)


stylesheet
 = _ "stylesheet" _ name:name lb* page:page*{
     return { name, page }
}

page
 = _ "page" _ name:name _ block:block lb*{
   return { name, block };
 }

section
 = _ "section" _ name:stringLiteral lb* block:sectionBody{
   return { name, block };
 }

question
 = _ "question" _ name:name lb* widget:widget? lb*{
   return { name, widget };
 }

widget
 = _ "widget" _ name:name options:options? lb* {
   return {name, options};
 }

options
 = "(" _ args:args _ ")" lb* {
   return args;
 }

args
  = head:stringLiteral rest:(_ "," _ r:args{ return r; })? {
    return rest != null ? [head].concat(rest) : [head];
}

style
 = _ name:name _ ":" _ args:styleArgs lb*{
   return {name, args}
}

styleArgs
 = numberLiteral / stringLiteral / color


color
 = _ code:(["#"][0-9]+){
    return "#".concat(code[1].join(""))
}

name
 = v:([a-zA-Z]+) {
     return v.join("")
}

// Identifier?
identifier
 = chars:([a-zA-Z]+) {
     return chars.join("");
}

// Boolean Literal
booleanLiteral
  = Literal:("True" / "False") {
    return Literal == "True"
}

// Integer
numberLiteral
  = digits:([-]?[0-9]+) {
      return parseInt(digits.join(""), 10)
}

// String Literal, Currently only support double quoted String
stringLiteral
 = '"' chars:doubleString* '"'{
     return chars.join('');
}

doubleString
  = !('"' / "\\") char:. { return char; }
  / "\\" sequence:escapeSequence { return sequence; }

escapeSequence
  = "'"
  / '"'
  / "\\"
  / "b"  { return "\b";   }
  / "f"  { return "\f";   }
  / "n"  { return "\n";   }
  / "r"  { return "\r";   }
  / "t"  { return "\t";   }
  / "v"  { return "\x0B"; }

type = "money" / "date" / "integer" / "boolean"
value = identifier / numberLiteral / stringLiteral / booleanLiteral
comment = "//" (![\n] .)*
ws = [ \t]
_ = (ws / comment)*
lb = [ \t\r\n] / comment