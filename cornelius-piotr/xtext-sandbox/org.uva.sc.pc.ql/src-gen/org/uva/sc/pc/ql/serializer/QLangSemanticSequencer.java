/*
 * generated by Xtext 2.12.0
 */
package org.uva.sc.pc.ql.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.uva.sc.pc.ql.qLang.Form;
import org.uva.sc.pc.ql.qLang.Model;
import org.uva.sc.pc.ql.qLang.QLangPackage;
import org.uva.sc.pc.ql.qLang.Question;
import org.uva.sc.pc.ql.services.QLangGrammarAccess;

@SuppressWarnings("all")
public class QLangSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QLangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QLangPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QLangPackage.FORM:
				sequence_Form(context, (Form) semanticObject); 
				return; 
			case QLangPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case QLangPackage.QUESTION:
				sequence_Question(context, (Question) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Form returns Form
	 *
	 * Constraint:
	 *     (name=ID questions+=Question*)
	 */
	protected void sequence_Form(ISerializationContext context, Form semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     forms+=Form+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Question returns Question
	 *
	 * Constraint:
	 *     (name=ID label=STRING type=QuestionType)
	 */
	protected void sequence_Question(ISerializationContext context, Question semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QLangPackage.Literals.QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QLangPackage.Literals.QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, QLangPackage.Literals.QUESTION__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QLangPackage.Literals.QUESTION__LABEL));
			if (transientValues.isValueTransient(semanticObject, QLangPackage.Literals.QUESTION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QLangPackage.Literals.QUESTION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQuestionAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getQuestionAccess().getLabelSTRINGTerminalRuleCall_2_0(), semanticObject.getLabel());
		feeder.accept(grammarAccess.getQuestionAccess().getTypeQuestionTypeParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
}
