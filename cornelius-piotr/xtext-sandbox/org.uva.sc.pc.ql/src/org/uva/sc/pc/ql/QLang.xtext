grammar org.uva.sc.pc.ql.QLang with org.eclipse.xtext.common.Terminals

generate qLang "http://www.uva.org/sc/pc/ql/QLang"

Form:
	'form' name=ID '{'
	body=BlockBody
	blocks+=Block*
	'}';

Block:
	'if' '(' expression=Expression ')' '{'
	body=BlockBody
	'}';

BlockBody:
	{BlockBody} questions+=Question*;

Question:
	name=ID ':' label=STRING type=QuestionType ('=' '(' expression=Expression ')')?;	

Expression:
	Or;

Or returns Expression:
	And ({Or.left=current} op="||" right=And)*;

And returns Expression:
	Equality ({And.left=current} op="&&" right=Equality)*;

Equality returns Expression:
	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*;

Comparison returns Expression:
	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*;

PlusOrMinus returns Expression:
	MulOrDiv (({PlusOrMinus.left=current} op=('+' | '-')) right=MulOrDiv)*;

MulOrDiv returns Expression:
	Atomic (({MulOrDiv.left=current} op=('*' | '/')) right=Atomic)*;

Atomic returns Expression:
//'(' Expression ')' |
	{Not} "!" expression=Atomic | {QuestionRef} question=[Question];

QuestionType:
	TypeBool | TypeString | TypeInteger | TypeDecimal | TypeDate | TypeMoney;

TypeBool returns QuestionType:
	{TypeBool} 'boolean';

TypeString returns QuestionType:
	{TypeString} 'string';

TypeInteger returns QuestionType:
	{TypeInteger} 'integer';

TypeDecimal returns QuestionType:
	{TypeDecimal} 'decimal';

TypeDate returns QuestionType:
	{TypeDate} 'date';

TypeMoney returns QuestionType:
	{TypeMoney} 'money' | {TypeMoney} 'currency';

