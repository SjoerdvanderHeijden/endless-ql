/*
 * generated by Xtext 2.12.0
 */
package org.uva.sc.pc.ql.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.uva.sc.pc.ql.qLang.Form
import org.uva.sc.pc.ql.qLang.QLangPackage

@RunWith(XtextRunner)
@InjectWith(QLangInjectorProvider)
class QLangParsingTest {

	@Inject
	ParseHelper<Form> parseHelper

	@Inject
	ValidationTestHelper validationTestHelper;

	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			form TestForm{
				q1: "Do you have a pet?" boolean
				q2: "Do you have a house?" boolean
				if(q1){
					q1_1: "Do you have a dog?" boolean = (q1 && q2)
					q1_2: "Do you have a cat?" boolean = (q1 || q2)
				}
			}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)

		validationTestHelper.assertNoErrors(result)
	}

	@Test
	def void testErrorOnDuplicateVariable() {
		val result = parseHelper.parse('''
			form TestForm{
				q1: "Do you have a pet?" boolean
				q1: "Do you have a house?" boolean
			}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)

		validationTestHelper.assertError(result, QLangPackage.eINSTANCE.question, "")
	}
	
	@Test
	def void testErrorOnForwardReference() {
		val result = parseHelper.parse('''
			form TestForm{
				q1: "Do you have a pet?" boolean
				if(q2){
					q2: "Do you have a house?" boolean
				}
			}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)

		validationTestHelper.assertError(result, QLangPackage.eINSTANCE.question, "")
	}
	
	@Test
	def void testErrorOnSelfReference() {
		val result = parseHelper.parse('''
			form TestForm{
				q1: "Do you have a pet?" boolean = (q1 && q1)
			}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)

		validationTestHelper.assertError(result, QLangPackage.eINSTANCE.question, "")
	}
	
	@Test
	def void testErrorOnEmptyForm() {
		val result = parseHelper.parse('''
			form TestForm{
				
			}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)

		validationTestHelper.assertError(result, QLangPackage.eINSTANCE.question, "")
	}
	
	@Test
	def void testErrorOnEmptyBlock() {
		val result = parseHelper.parse('''
			form TestForm{
				q1: "Do you have a pet?" boolean
				q2: "Do you have a pet?" boolean
				if(q1 && q2){
					
				}
			}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)

		validationTestHelper.assertError(result, QLangPackage.eINSTANCE.question, "")
	}

}
