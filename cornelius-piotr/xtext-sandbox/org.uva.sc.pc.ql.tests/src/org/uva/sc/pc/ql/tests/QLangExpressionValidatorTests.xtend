/*
 * generated by Xtext 2.12.0
 */
package org.uva.sc.pc.ql.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.uva.sc.pc.ql.qLang.Form
import org.uva.sc.pc.ql.qLang.QLangPackage
import org.uva.sc.pc.ql.qLang.util.TypeUtil
import org.uva.sc.pc.ql.validation.QLangExpressionValidator

@RunWith(XtextRunner)
@InjectWith(QLangInjectorProvider)
class QLangExpressionValidatorTests {

	@Inject
	ParseHelper<Form> parseHelper

	@Inject
	ValidationTestHelper validationTestHelper;

	@Test
	def void assertBooleanVariableInExpression(){
		assertVariableInExpressionHelper(TypeUtil.OP_OR, TypeUtil.TYPE_BOOLEAN, false)
		assertVariableInExpressionHelper(TypeUtil.OP_AND, TypeUtil.TYPE_BOOLEAN, false)
		assertVariableInExpressionHelper(TypeUtil.OP_EQUALS, TypeUtil.TYPE_BOOLEAN, true)
		assertVariableInExpressionHelper(TypeUtil.OP_NOT_EQUALS, TypeUtil.TYPE_BOOLEAN, true)
		assertVariableInExpressionHelper(TypeUtil.OP_SMALLER_THAN, TypeUtil.TYPE_BOOLEAN, true)
		assertVariableInExpressionHelper(TypeUtil.OP_SMALLER_THAN_EQUALS, TypeUtil.TYPE_BOOLEAN, true)
		assertVariableInExpressionHelper(TypeUtil.OP_GREATER_THAN, TypeUtil.TYPE_BOOLEAN, true)
		assertVariableInExpressionHelper(TypeUtil.OP_GREATER_THAN_EUQALS, TypeUtil.TYPE_BOOLEAN, true)
		assertVariableInExpressionHelper(TypeUtil.OP_PLUS, TypeUtil.TYPE_BOOLEAN, true)
		assertVariableInExpressionHelper(TypeUtil.OP_MINUS, TypeUtil.TYPE_BOOLEAN, true)
		assertVariableInExpressionHelper(TypeUtil.OP_MUL, TypeUtil.TYPE_BOOLEAN, true)
		assertVariableInExpressionHelper(TypeUtil.OP_DIV, TypeUtil.TYPE_BOOLEAN, true)
		assertVariableInExpressionHelper(TypeUtil.OP_NOT, TypeUtil.TYPE_BOOLEAN, true)
		
	}
	
	def assertVariableInExpressionHelper(String op, String type, boolean expectError){
		val result = parseHelper.parse('''
			form TestForm{
							q1: "Do you have a pet?" «type»
							q2: "Do you have a house?" boolean
							if(«IF op != "!"»q1«ENDIF» «op» q2){
								q1_1: "Do you have a dog?" boolean
							}
						}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		if(!expectError)
			validationTestHelper.assertNoErrors(result)
		else
			validationTestHelper.assertError(result, QLangPackage.eINSTANCE.questionRef, QLangExpressionValidator.INVALID_EXPRESSION)
	}
	
}
