/*
 * generated by Xtext 2.12.0
 */
grammar InternalQLang;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.uva.sc.pc.ql.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.uva.sc.pc.ql.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.uva.sc.pc.ql.services.QLangGrammarAccess;

}
@parser::members {
	private QLangGrammarAccess grammarAccess;

	public void setGrammarAccess(QLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getFormsAssignment()); }
		(rule__Model__FormsAssignment)*
		{ after(grammarAccess.getModelAccess().getFormsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForm
entryRuleForm
:
{ before(grammarAccess.getFormRule()); }
	 ruleForm
{ after(grammarAccess.getFormRule()); } 
	 EOF 
;

// Rule Form
ruleForm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFormAccess().getGroup()); }
		(rule__Form__Group__0)
		{ after(grammarAccess.getFormAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuestion
entryRuleQuestion
:
{ before(grammarAccess.getQuestionRule()); }
	 ruleQuestion
{ after(grammarAccess.getQuestionRule()); } 
	 EOF 
;

// Rule Question
ruleQuestion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuestionAccess().getGroup()); }
		(rule__Question__Group__0)
		{ after(grammarAccess.getQuestionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuestionType
entryRuleQuestionType
:
{ before(grammarAccess.getQuestionTypeRule()); }
	 ruleQuestionType
{ after(grammarAccess.getQuestionTypeRule()); } 
	 EOF 
;

// Rule QuestionType
ruleQuestionType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuestionTypeAccess().getBoolTypeParserRuleCall()); }
		ruleBoolType
		{ after(grammarAccess.getQuestionTypeAccess().getBoolTypeParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolType
entryRuleBoolType
:
{ before(grammarAccess.getBoolTypeRule()); }
	 ruleBoolType
{ after(grammarAccess.getBoolTypeRule()); } 
	 EOF 
;

// Rule BoolType
ruleBoolType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolTypeAccess().getBooleanKeyword()); }
		'boolean'
		{ after(grammarAccess.getBoolTypeAccess().getBooleanKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Form__Group__0__Impl
	rule__Form__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormAccess().getFormKeyword_0()); }
	'form'
	{ after(grammarAccess.getFormAccess().getFormKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Form__Group__1__Impl
	rule__Form__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormAccess().getNameAssignment_1()); }
	(rule__Form__NameAssignment_1)
	{ after(grammarAccess.getFormAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Form__Group__2__Impl
	rule__Form__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getFormAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Form__Group__3__Impl
	rule__Form__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormAccess().getQuestionsAssignment_3()); }
	(rule__Form__QuestionsAssignment_3)*
	{ after(grammarAccess.getFormAccess().getQuestionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Form__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getFormAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Question__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Question__Group__0__Impl
	rule__Question__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuestionAccess().getNameAssignment_0()); }
	(rule__Question__NameAssignment_0)
	{ after(grammarAccess.getQuestionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Question__Group__1__Impl
	rule__Question__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuestionAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getQuestionAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Question__Group__2__Impl
	rule__Question__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuestionAccess().getLabelAssignment_2()); }
	(rule__Question__LabelAssignment_2)
	{ after(grammarAccess.getQuestionAccess().getLabelAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Question__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuestionAccess().getTypeAssignment_3()); }
	(rule__Question__TypeAssignment_3)
	{ after(grammarAccess.getQuestionAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__FormsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getFormsFormParserRuleCall_0()); }
		ruleForm
		{ after(grammarAccess.getModelAccess().getFormsFormParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFormAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__QuestionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormAccess().getQuestionsQuestionParserRuleCall_3_0()); }
		ruleQuestion
		{ after(grammarAccess.getFormAccess().getQuestionsQuestionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuestionAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getQuestionAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__LabelAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuestionAccess().getLabelSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getQuestionAccess().getLabelSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuestionAccess().getTypeQuestionTypeParserRuleCall_3_0()); }
		ruleQuestionType
		{ after(grammarAccess.getQuestionAccess().getTypeQuestionTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
